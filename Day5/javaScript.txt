Day5:Functions in JavaScript
A JavaScript function is a block of code designed to perform a particular task.
A JavaScript function is executed when "something" invokes it (calls it).
ex.
// Function to compute the product of p1 and p2
function myFunction(p1, p2) {
  return p1 * p2;
}

JavaScript Function Syntax:
A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().

Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).
The parentheses may include parameter names separated by commas:
(parameter1, parameter2, ...)
The code to be executed, by the function, is placed inside curly brackets: {}
ex.function name(parameter1, parameter2, parameter3) {
  // code to be executed
}

Function parameters are listed inside the parentheses () in the function definition.

Function arguments are the values received by the function when it is invoked.

Inside the function, the arguments (the parameters) behave as local variables.

Function Invocation
The code inside the function will execute when "something" invokes (calls) the function:

When an event occurs (when a user clicks a button)
When it is invoked (called) from JavaScript code
Automatically (self invoked).

Function Return
When JavaScript reaches a return statement, the function will stop executing.

If the function was invoked from a statement, JavaScript will "return" to execute the code after the invoking statement.

Functions often compute a return value. The return value is "returned" back to the "caller":

ex.// Function is called, the return value will end up in x
let x = myFunction(4, 3);

function myFunction(a, b) {
// Function returns the product of a and b
  return a * b;
}

Why Functions?
With functions you can reuse code
You can write code that can be used many times.
You can use the same code with different arguments, to produce different results.

Local Variables
Variables declared within a JavaScript function, become LOCAL to the function.
Local variables can only be accessed from within the function.

// code here can NOT use carName

function myFunction() {
  let carName = "Volvo";
  // code here CAN use carName
}
// code here can NOT use carName
Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.
Local variables are created when a function starts, and deleted when the function is completed.

##Arrow functions in js:
Arrow functions were introduced in ES6.
Arrow functions allow us to write shorter function syntax:
ex.let myFunction = (a, b) => a * b;
 compare:Before Arrow:
hello = function() {
return "Hello World!"; }

With Arrow Function:
hello = () => {
  return "Hello World!";
}
Note: This works only if the function has only one statement.
If you have parameters, you pass them inside the parentheses:

Arrow Function With Parameters:
hello = (val) => "Hello " + val;

In fact, if you have only one parameter, you can skip the parentheses as well:
Arrow Function Without Parentheses:
hello = val => "Hello " + val;

What About this?
The handling of this is also different in arrow functions compared to regular functions.

In short, with arrow functions there are no binding of this.

In regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever.

With arrow functions the this keyword always represents the object that defined the arrow function.

Let us take a look at two examples to understand the difference.

Both examples call a method twice, first when the page loads, and once again when the user clicks a button.

The first example uses a regular function, and the second example uses an arrow function.

The result shows that the first example returns two different objects (window and button), and the second example returns the window object twice, because the window object is the "owner" of the function.

Example
With a regular function this represents the object that calls the function:

// Regular Function:
hello = function() {
  document.getElementById("demo").innerHTML += this;
}

// The window object calls the function:
window.addEventListener("load", hello);

// A button object calls the function:
document.getElementById("btn").addEventListener("click", hello);

With an arrow function this represents the owner of the function:
// Arrow Function:
hello = () => {
  document.getElementById("demo").innerHTML += this;
}
// The window object calls the function:
window.addEventListener("load", hello);

// A button object calls the function:
document.getElementById("btn").addEventListener("click", hello);

========================================================================================
JavaScript is a versatile language that can be used both on the client side and the server side. Hereâ€™s a detailed explanation:

Client-Side vs. Server-Side JavaScript
Client-Side JavaScript:

Purpose: Runs in the web browser, allowing you to create interactive web pages and user interfaces.
Usage: Used for tasks such as form validation, animations, and making asynchronous requests (e.g., using AJAX or Fetch API).
Examples: Manipulating the DOM, handling user events, making HTTP requests to fetch data.
Server-Side JavaScript:

Purpose: Runs on the server, enabling you to build server-side applications and services.
Usage: Used for tasks such as handling HTTP requests, interacting with databases, and managing server-side logic.
Examples: Building APIs, rendering server-side views, managing sessions.
Common Environment: Node.js is the most popular runtime for executing JavaScript on the server side.
JavaScript Compilation and Transpilation
Compilation vs. Transpilation:

Compilation: The process of converting source code written in a high-level programming language into machine code or bytecode that can be executed by the computer.
Transpilation: A specific type of compilation where the source code is transformed from one high-level language to another high-level language. In the context of JavaScript, transpilation involves converting modern JavaScript code (ES6+) into older versions of JavaScript (ES5) for compatibility with older browsers.
JavaScript and Compilers:

JavaScript Engines: JavaScript is typically interpreted by JavaScript engines built into browsers or server environments (e.g., V8 engine in Chrome and Node.js). This means that JavaScript code is usually executed directly without a separate compilation step.
No Traditional Compiler: Traditional JavaScript does not use a compiler in the same way as languages like C++ or Java. Instead, JavaScript engines parse and execute the code directly.
JavaScript and Transpilers:

Babel: A popular JavaScript transpiler that converts modern JavaScript (ES6+) into an older version of JavaScript (ES5) to ensure compatibility with older browsers.
TypeScript: A superset of JavaScript that adds static types and compiles down to plain JavaScript. TypeScript uses a transpiler to convert TypeScript code into JavaScript.
In Summary:

JavaScript is both client-side and server-side: It runs in the browser (client-side) and on the server (with environments like Node.js).
JavaScript does not have a traditional compiler: It is usually interpreted by engines like V8.
JavaScript uses transpilers: Tools like Babel and TypeScript are used to transpile modern or type-enhanced JavaScript into compatible JavaScript code.
This dual capability and use of transpilers make JavaScript a highly flexible and powerful language for both web and server development.