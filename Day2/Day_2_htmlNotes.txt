despite prompt() use to accepting input from user.
 we can use forms in html (to overcome its drwabacks =>)
 
 ##Using HTML Form Elements
For a better user experience and more control, use HTML input elements and handle the input with JavaScript.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Accept User Input</title>
</head>
<body>
    <h1>Enter Your Name</h1>
    <form id="nameForm">
        <input type="text" id="nameInput" placeholder="Enter your name">
        <button type="submit">Submit</button>
    </form>
    <p id="greeting"></p>

    <script src="script.js"></script>
</body>
</html>

//script..js#
document.getElementById('nameForm').addEventListener('submit', function(event) {
    event.preventDefault();
    let userInput = document.getElementById('nameInput').value;
    document.getElementById('greeting').textContent = "Hello, " + userInput + "!";
});

//
# Advantages of Using HTML Forms
Better User Experience: Forms integrate seamlessly into the webpage without blocking the user.
Styling and Customization: Forms can be styled using CSS to match the rest of your site.
Validation: Input can be easily validated using JavaScript or HTML5 form validation attributes.
  
#Summary:  
prompt(): Quick and easy for simple, temporary input tasks.
HTML Forms: Better for more complex applications requiring a polished user experience, customization, and validation.
For most modern web applications, using HTML forms with JavaScript is the recommended approach.